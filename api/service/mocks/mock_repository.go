package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	models "Todo/models"
)

// TugasRepository is an autogenerated mock type for the TugasRepository type
type TugasRepository struct {
	mock.Mock
}

// Created provides a mock function with given fields: _a0
func (_m *TugasRepository) Created(_a0 models.Tugas) (models.Tugas, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Created")
	}

	var r0 models.Tugas
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Tugas) (models.Tugas, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Tugas) models.Tugas); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Tugas)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Tugas) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *TugasRepository) Delete(_a0 models.Tugas) (models.Tugas, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 models.Tugas
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Tugas) (models.Tugas, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Tugas) models.Tugas); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Tugas)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Tugas) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, page, perPage
func (_m *TugasRepository) GetAll(ctx *gin.Context, page int, perPage int) []models.Tugas {
	ret := _m.Called(ctx, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Tugas
	if rf, ok := ret.Get(0).(func(*gin.Context, int, int) []models.Tugas); ok {
		r0 = rf(ctx, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tugas)
		}
	}

	return r0
}

// GetByDeadline provides a mock function with given fields: ded, page, perPage
func (_m *TugasRepository) GetByDeadline(ded string, page int, perPage int) ([]models.Tugas, error) {
	ret := _m.Called(ded, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetByDeadline")
	}

	var r0 []models.Tugas
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]models.Tugas, error)); ok {
		return rf(ded, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []models.Tugas); ok {
		r0 = rf(ded, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tugas)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(ded, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *TugasRepository) GetById(id uint) (models.Tugas, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 models.Tugas
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Tugas, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Tugas); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Tugas)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStatus provides a mock function with given fields: sts, page, perPage
func (_m *TugasRepository) GetByStatus(sts bool, page int, perPage int) ([]models.Tugas, error) {
	ret := _m.Called(sts, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []models.Tugas
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, int, int) ([]models.Tugas, error)); ok {
		return rf(sts, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(bool, int, int) []models.Tugas); ok {
		r0 = rf(sts, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tugas)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, int, int) error); ok {
		r1 = rf(sts, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBylevel provides a mock function with given fields: lvl, page, perPage
func (_m *TugasRepository) GetBylevel(lvl string, page int, perPage int) ([]models.Tugas, error) {
	ret := _m.Called(lvl, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetBylevel")
	}

	var r0 []models.Tugas
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]models.Tugas, error)); ok {
		return rf(lvl, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []models.Tugas); ok {
		r0 = rf(lvl, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tugas)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(lvl, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *TugasRepository) Update(_a0 models.Tugas) (models.Tugas, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Tugas
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Tugas) (models.Tugas, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Tugas) models.Tugas); ok {
		r0 = rf(_a0)
	}

	return r0, r1
}

// NewTugasRepository creates a new instance of TugasRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a testing.T value.
func NewTugasRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TugasRepository {
	mock := &TugasRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
