// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	respons "Todo/api/service/Respons"
)

// TugasService is an autogenerated mock type for the TugasService type
type TugasService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *TugasService) Create(ctx *gin.Context) (interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx
func (_m *TugasService) Delete(ctx *gin.Context) (interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, page, perPage
func (_m *TugasService) GetAll(ctx *gin.Context, page int, perPage int) []respons.GetIdTugasRespon {
	ret := _m.Called(ctx, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []respons.GetIdTugasRespon
	if rf, ok := ret.Get(0).(func(*gin.Context, int, int) []respons.GetIdTugasRespon); ok {
		r0 = rf(ctx, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]respons.GetIdTugasRespon)
		}
	}

	return r0
}

// GetByDeadline provides a mock function with given fields: ctx, level, page, perPage
func (_m *TugasService) GetByDeadline(ctx *gin.Context, level string, page int, perPage int) (interface{}, error) {
	ret := _m.Called(ctx, level, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetByDeadline")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, int, int) (interface{}, error)); ok {
		return rf(ctx, level, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, int, int) interface{}); ok {
		r0 = rf(ctx, level, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, int, int) error); ok {
		r1 = rf(ctx, level, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx
func (_m *TugasService) GetById(ctx *gin.Context) (interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStatus provides a mock function with given fields: ctx, bol, page, perPage
func (_m *TugasService) GetByStatus(ctx *gin.Context, bol bool, page int, perPage int) (interface{}, error) {
	ret := _m.Called(ctx, bol, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, bool, int, int) (interface{}, error)); ok {
		return rf(ctx, bol, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, bool, int, int) interface{}); ok {
		r0 = rf(ctx, bol, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, bool, int, int) error); ok {
		r1 = rf(ctx, bol, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBylevel provides a mock function with given fields: ctx, level, page, perPage
func (_m *TugasService) GetBylevel(ctx *gin.Context, level string, page int, perPage int) (interface{}, error) {
	ret := _m.Called(ctx, level, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetBylevel")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, int, int) (interface{}, error)); ok {
		return rf(ctx, level, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, int, int) interface{}); ok {
		r0 = rf(ctx, level, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, int, int) error); ok {
		r1 = rf(ctx, level, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx
func (_m *TugasService) Update(ctx *gin.Context) (interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTugasService creates a new instance of TugasService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTugasService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TugasService {
	mock := &TugasService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
